{"mappings":"ACAA,0BAA0B,E,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,E,I,A,W,M,A,U,wI,G,CAG1B,SAAS,EAAgB,CAAI,EAC3B,MAAO,CAAE,EAAK,OAAO,CAAC,IAAK,IAAI,UAAU,CAAC,IAAK,GACjD,CAEA,IAcI,EACA,EAfE,EAAY,SAAS,aAAa,CAAC,SAEnC,EAAQ,SAAS,aAAa,CAAC,SAE/B,EAAY,SAAS,aAAa,CAAC,SAErC,EAAU,SAAS,gBAAgB,CAAC,MAEpC,EAAY,EAAI,GAAS,MAAM,CAAC,GAEpC,EAAU,GAAG,GAEb,IAAM,EAAe,SAAS,aAAa,CAAC,OAQ5C,SAAS,IAAkB,IAAA,EAAA,UAAA,MAAA,CAAA,GAAA,AAAA,KAAA,IAAA,SAAA,CAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAAO,OAChC,EAAQ,SACR,EAAc,GAAQ,MAAA,CAAL,EAAK,eAEtB,EAAa,SAAS,CAAI,aAEnB,MAAA,CADC,EAAM,kBACK,MAAA,CAAZ,EAAY,cAGnB,EAAa,SAAS,CAAC,GAAG,CAAC,SAC3B,EAAa,SAAS,CAAC,MAAM,CAAC,WAC9B,EAAM,KAAK,CAAC,GAEZ,WAAW,WACT,EAAa,MAAM,EACrB,EAAG,IACL,CAoBA,SAAS,EAAe,CAAgB,CAAE,CAAc,CAAE,CAAW,EACnE,IAAI,EAAU,EAAiB,KAAK,CAEpC,GAAI,CAAC,EAAS,CACZ,EAAiB,MAAM,GACvB,EAAe,SAAS,CAAG,EAE3B,MACF,CAEA,GAAI,MAAM,EAAgB,KACrB,CAAC,MAAM,EAAgB,KAOxB,CAAC,MAAM,EAAgB,KACtB,MAAM,EAAgB,KAOvB,CAAC,EAAY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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["/* eslint-disable no-tabs */ \"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nfunction convertToNumber(text) {\n    return +text.replace(\"$\", \"\").replaceAll(\",\", \"\");\n}\nvar tableHead = document.querySelector(\"thead\");\nvar table = document.querySelector(\"table\");\nvar tableBody = document.querySelector(\"tbody\");\nvar allRows = document.querySelectorAll(\"tr\");\nvar employees = _to_consumable_array(allRows).splice(1);\nemployees.pop();\nvar notification = document.createElement(\"div\");\nvar title;\nvar description;\nnotification.dataset.qa = \"notification\";\nnotification.classList.add(\"notification\");\nfunction errorNotification() {\n    var data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"Data\";\n    title = \"Error!\";\n    description = \"\".concat(data, \" is invalid\");\n    notification.innerHTML = \"\\n    <h2>\".concat(title, \"</h2>\\n    <p>\").concat(description, \"</p>\\n    \");\n    notification.classList.add(\"error\");\n    notification.classList.remove(\"success\");\n    table.after(notification);\n    setTimeout(function() {\n        notification.remove();\n    }, 2000);\n}\nfunction successNotification() {\n    title = \"Success!\";\n    description = \"Data is valid\";\n    notification.innerHTML = \"\\n    <h2>\".concat(title, \"</h2>\\n    <p>\").concat(description, \"</p>\\n  \");\n    notification.classList.add(\"success\");\n    notification.classList.remove(\"error\");\n    table.after(notification);\n    setTimeout(function() {\n        notification.remove();\n    }, 2000);\n}\nfunction cellValidation(currentCellInput, currentElement, currentText) {\n    var newText = currentCellInput.value;\n    if (!newText) {\n        currentCellInput.remove();\n        currentElement.innerText = currentText;\n        return;\n    }\n    if (isNaN(convertToNumber(currentText)) && !isNaN(convertToNumber(newText))) {\n        errorNotification();\n        currentElement.innerText = currentText;\n        return;\n    }\n    if (!isNaN(convertToNumber(currentText)) && isNaN(convertToNumber(newText))) {\n        errorNotification();\n        currentElement.innerText = currentText;\n        return;\n    }\n    if (!currentText.includes(\"$\") && !isNaN(convertToNumber(currentText)) && (convertToNumber(newText) < minAge || convertToNumber(newText) > maxAge)) {\n        errorNotification();\n        currentElement.innerText = currentText;\n        return;\n    }\n    if (currentText.includes(\"$\") && !isNaN(convertToNumber(currentText)) && convertToNumber(newText) <= 0) {\n        errorNotification(\"Salary\");\n        currentElement.innerText = currentText;\n        return;\n    }\n    if (currentText.includes(\"$\") && !newText.includes(\"$\")) newText = \"$\".concat(newText);\n    currentCellInput.remove();\n    currentElement.innerText = newText;\n}\nfunction updateEmployeesList() {\n    allRows = document.querySelectorAll(\"tr\");\n    employees = _to_consumable_array(allRows).splice(1);\n    employees.pop();\n}\nfunction selectEmployee() {\n    employees.forEach(function(element) {\n        element.addEventListener(\"click\", function() {\n            var activeElement = document.querySelector(\".active\");\n            if (activeElement) activeElement.classList.remove(\"active\");\n            element.classList.add(\"active\");\n        });\n    });\n}\nvar minNameLength = 4;\nvar minAge = 18;\nvar maxAge = 90;\nfunction addAbilityToEdit() {\n    var tableCells = document.querySelectorAll(\"td\");\n    _to_consumable_array(tableCells).forEach(function(element) {\n        var initialText;\n        element.addEventListener(\"dblclick\", function() {\n            var cellInput = document.createElement(\"input\");\n            initialText = element.innerText;\n            element.innerText = \"\";\n            element.append(cellInput);\n            cellInput.classList.add(\"cell-input\");\n            cellInput.value = initialText;\n            cellInput.focus();\n        });\n        element.addEventListener(\"focusout\", function() {\n            var cellInput = document.querySelector(\".cell-input\");\n            cellValidation(cellInput, element, initialText);\n        });\n        element.addEventListener(\"keydown\", function(e) {\n            if (e.key === \"Enter\") {\n                var cellInput = document.querySelector(\".cell-input\");\n                cellValidation(cellInput, element, initialText);\n            }\n        });\n    });\n}\nvar form = document.createElement(\"form\");\nform.innerHTML = '\\n  <form>\\n      <label>Name:\\n        <input\\n          name=\"name\"\\n          type=\"text\"\\n          data-qa=\"name\"\\n          required\\n        >\\n      </label>\\n      <label>Position:\\n        <input\\n          name=\"position\"\\n          type=\"text\"\\n          data-qa=\"position\"\\n          required\\n        >\\n      </label>\\n      <label>Office:\\n        <select\\n          data-qa=\"office\"\\n          name=\"city\"\\n          required\\n        >\\n          <option>Tokyo</option>\\n          <option value=\"singapore\">Singapore</option>\\n          <option value=\"london\">London</option>\\n          <option value=\"New York\">New York</option>\\n          <option value=\"Edinburgh\">Edinburgh</option>\\n          <option value=\"San Francisco\">San Francisco</option>\\n        </select>\\n      </label>\\n      <label>Age:\\n        <input\\n          name=\"age\"\\n          type=\"number\"\\n          data-qa=\"age\"\\n          required\\n        >\\n      </label>\\n      <label>Salary:\\n        <input\\n          name=\"salary\"\\n          type=\"number\"\\n          data-qa=\"salary\"\\n          required\\n        >\\n      </label>\\n      <button type=\"submit\">Save to table</button>\\n    </form>\\n';\ntable.after(form);\nform.classList.add(\"new-employee-form\");\nvar saveButton = document.querySelector(\"button\");\nsaveButton.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n});\nsaveButton.addEventListener(\"click\", function(e) {\n    var newRow = document.createElement(\"tr\");\n    var employeeName = form.children[0].firstElementChild.value;\n    var position = form.children[1].firstElementChild.value;\n    var office = form.children[2].firstElementChild.value;\n    var age = +form.children[3].firstElementChild.value;\n    var salary = +form.children[4].firstElementChild.value;\n    newRow.innerHTML = \"\\n    <tr>\\n      <td>\".concat(employeeName, \"</td>\\n      <td>\").concat(position, \"</td>\\n      <td>\").concat(office, \"</td>\\n      <td>\").concat(age, \"</td>\\n      <td>$\").concat(salary.toLocaleString(\"en-US\"), \"</td>\\n    </tr>\\n  \");\n    if (employeeName.length < minNameLength || !isNaN(+employeeName)) {\n        e.preventDefault();\n        errorNotification(\"Name\");\n        return;\n    }\n    if (age < minAge || age > maxAge) {\n        e.preventDefault();\n        errorNotification(\"Age\");\n        return;\n    }\n    if (salary <= 0) {\n        e.preventDefault();\n        errorNotification(\"Salary\");\n        return;\n    }\n    if (!isNaN(+position)) {\n        e.preventDefault(\"Position\");\n        errorNotification();\n        return;\n    }\n    successNotification();\n    tableBody.append(newRow);\n    form.reset();\n    addAbilityToEdit();\n    updateEmployeesList();\n    selectEmployee();\n});\nvar salaryClicked = false;\nvar ageClicked = false;\nvar officeClicked = false;\nvar positionClicked = false;\nvar nameClicked = false;\ntableHead.addEventListener(\"click\", function(e) {\n    switch(e.target.innerText){\n        case \"Salary\":\n            switch(salaryClicked){\n                case false:\n                    employees.sort(function(employee1, employee2) {\n                        return convertToNumber(employee1.children[4].innerText) > convertToNumber(employee2.children[4].innerText) ? 1 : -1;\n                    });\n                    salaryClicked = true;\n                    break;\n                case true:\n                    employees.sort(function(employee1, employee2) {\n                        return convertToNumber(employee1.children[4].innerText) < convertToNumber(employee2.children[4].innerText) ? 1 : -1;\n                    });\n                    salaryClicked = false;\n                    break;\n            }\n            break;\n        case \"Age\":\n            switch(ageClicked){\n                case false:\n                    employees.sort(function(employee1, employee2) {\n                        return +employee1.children[3].innerText > +employee2.children[3].innerText ? 1 : -1;\n                    });\n                    ageClicked = true;\n                    break;\n                case true:\n                    employees.sort(function(employee1, employee2) {\n                        return +employee1.children[3].innerText < +employee2.children[3].innerText ? 1 : -1;\n                    });\n                    ageClicked = false;\n                    break;\n            }\n            break;\n        case \"Office\":\n            switch(officeClicked){\n                case false:\n                    employees.sort(function(employee1, employee2) {\n                        return employee1.children[2].innerText.localeCompare(employee2.children[2].innerText);\n                    });\n                    officeClicked = true;\n                    break;\n                case true:\n                    employees.sort(function(employee1, employee2) {\n                        return -employee1.children[2].innerText.localeCompare(employee2.children[2].innerText);\n                    });\n                    officeClicked = false;\n                    break;\n            }\n            break;\n        case \"Position\":\n            switch(positionClicked){\n                case false:\n                    employees.sort(function(employee1, employee2) {\n                        return employee1.children[1].innerText.localeCompare(employee2.children[1].innerText);\n                    });\n                    positionClicked = true;\n                    break;\n                case true:\n                    employees.sort(function(employee1, employee2) {\n                        return employee2.children[1].innerText.localeCompare(employee1.children[1].innerText);\n                    });\n                    positionClicked = false;\n                    break;\n            }\n            break;\n        case \"Name\":\n            switch(nameClicked){\n                case false:\n                    employees.sort(function(employee1, employee2) {\n                        return employee1.children[0].innerText.localeCompare(employee2.children[0].innerText);\n                    });\n                    nameClicked = true;\n                    break;\n                case true:\n                    employees.sort(function(employee1, employee2) {\n                        return -employee1.children[0].innerText.localeCompare(employee2.children[0].innerText);\n                    });\n                    nameClicked = false;\n                    break;\n            }\n            break;\n    }\n    tableBody.innerHTML = \"\\n      \".concat(employees.map(function(element) {\n        return \"\\n        <tr>\\n          <td>\".concat(element.children[0].innerText, \"</td>\\n          <td>\").concat(element.children[1].innerText, \"</td>\\n          <td>\").concat(element.children[2].innerText, \"</td>\\n          <td>\").concat(element.children[3].innerText, \"</td>\\n          <td>\").concat(element.children[4].innerText, \"</td>\\n        </tr>\\n      \");\n    }).join(\"\"), \"\\n    \");\n    updateEmployeesList();\n    selectEmployee();\n    addAbilityToEdit();\n});\nselectEmployee();\naddAbilityToEdit();\n\n//# sourceMappingURL=index.1cb16316.js.map\n","/* eslint-disable no-tabs */\n'use strict';\n\nfunction convertToNumber(text) {\n  return +(text.replace('$', '').replaceAll(',', ''));\n}\n\nconst tableHead = document.querySelector('thead');\n\nconst table = document.querySelector('table');\n\nconst tableBody = document.querySelector('tbody');\n\nlet allRows = document.querySelectorAll('tr');\n\nlet employees = [...allRows].splice(1);\n\nemployees.pop();\n\nconst notification = document.createElement('div');\n\nlet title;\nlet description;\n\nnotification.dataset.qa = 'notification';\nnotification.classList.add('notification');\n\nfunction errorNotification(data = 'Data') {\n  title = 'Error!';\n  description = `${data} is invalid`;\n\n  notification.innerHTML = `\n    <h2>${title}</h2>\n    <p>${description}</p>\n    `;\n\n  notification.classList.add('error');\n  notification.classList.remove('success');\n  table.after(notification);\n\n  setTimeout(() => {\n    notification.remove();\n  }, 2000);\n}\n\nfunction successNotification() {\n  title = 'Success!';\n  description = 'Data is valid';\n\n  notification.innerHTML = `\n    <h2>${title}</h2>\n    <p>${description}</p>\n  `;\n\n  notification.classList.add('success');\n  notification.classList.remove('error');\n  table.after(notification);\n\n  setTimeout(() => {\n    notification.remove();\n  }, 2000);\n}\n\nfunction cellValidation(currentCellInput, currentElement, currentText) {\n  let newText = currentCellInput.value;\n\n  if (!newText) {\n    currentCellInput.remove();\n    currentElement.innerText = currentText;\n\n    return;\n  }\n\n  if (isNaN(convertToNumber(currentText))\n    && !isNaN(convertToNumber(newText))) {\n    errorNotification();\n    currentElement.innerText = currentText;\n\n    return;\n  }\n\n  if (!isNaN(convertToNumber(currentText))\n    && isNaN(convertToNumber(newText))) {\n    errorNotification();\n    currentElement.innerText = currentText;\n\n    return;\n  }\n\n  if (!currentText.includes('$') && !isNaN(convertToNumber(currentText))\n    && ((convertToNumber(newText)) < minAge\n      || convertToNumber(newText) > maxAge)) {\n    errorNotification();\n    currentElement.innerText = currentText;\n\n    return;\n  }\n\n  if (currentText.includes('$') && !isNaN(convertToNumber(currentText))\n    && convertToNumber(newText) <= 0) {\n    errorNotification('Salary');\n    currentElement.innerText = currentText;\n\n    return;\n  }\n\n  if (currentText.includes('$') && !newText.includes('$')) {\n    newText = `$${newText}`;\n  }\n\n  currentCellInput.remove();\n  currentElement.innerText = newText;\n}\n\nfunction updateEmployeesList() {\n  allRows = document.querySelectorAll('tr');\n  employees = [...allRows].splice(1);\n  employees.pop();\n}\n\nfunction selectEmployee() {\n  employees.forEach(element => {\n    element.addEventListener('click', () => {\n      const activeElement = document.querySelector('.active');\n\n      if (activeElement) {\n        activeElement.classList.remove('active');\n      }\n      element.classList.add('active');\n    });\n  });\n}\n\nconst minNameLength = 4;\nconst minAge = 18;\nconst maxAge = 90;\n\nfunction addAbilityToEdit() {\n  const tableCells = document.querySelectorAll('td');\n\n  [...tableCells].forEach(element => {\n    let initialText;\n\n    element.addEventListener('dblclick', () => {\n      const cellInput = document.createElement('input');\n\n      initialText = element.innerText;\n\n      element.innerText = '';\n      element.append(cellInput);\n      cellInput.classList.add('cell-input');\n      cellInput.value = initialText;\n      cellInput.focus();\n    });\n\n    element.addEventListener('focusout', () => {\n      const cellInput = document.querySelector('.cell-input');\n\n      cellValidation(cellInput, element, initialText);\n    });\n\n    element.addEventListener('keydown', (e) => {\n      if (e.key === 'Enter') {\n        const cellInput = document.querySelector('.cell-input');\n\n        cellValidation(cellInput, element, initialText);\n      }\n    });\n  });\n}\n\nconst form = document.createElement('form');\n\nform.innerHTML = `\n  <form>\n      <label>Name:\n        <input\n          name=\"name\"\n          type=\"text\"\n          data-qa=\"name\"\n          required\n        >\n      </label>\n      <label>Position:\n        <input\n          name=\"position\"\n          type=\"text\"\n          data-qa=\"position\"\n          required\n        >\n      </label>\n      <label>Office:\n        <select\n          data-qa=\"office\"\n          name=\"city\"\n          required\n        >\n          <option>Tokyo</option>\n          <option value=\"singapore\">Singapore</option>\n          <option value=\"london\">London</option>\n          <option value=\"New York\">New York</option>\n          <option value=\"Edinburgh\">Edinburgh</option>\n          <option value=\"San Francisco\">San Francisco</option>\n        </select>\n      </label>\n      <label>Age:\n        <input\n          name=\"age\"\n          type=\"number\"\n          data-qa=\"age\"\n          required\n        >\n      </label>\n      <label>Salary:\n        <input\n          name=\"salary\"\n          type=\"number\"\n          data-qa=\"salary\"\n          required\n        >\n      </label>\n      <button type=\"submit\">Save to table</button>\n    </form>\n`;\n\ntable.after(form);\n\nform.classList.add('new-employee-form');\n\nconst saveButton = document.querySelector('button');\n\nsaveButton.addEventListener('submit', (e) => {\n  e.preventDefault();\n});\n\nsaveButton.addEventListener('click', (e) => {\n  const newRow = document.createElement('tr');\n\n  const employeeName = form.children[0].firstElementChild.value;\n  const position = form.children[1].firstElementChild.value;\n  const office = form.children[2].firstElementChild.value;\n  const age = +form.children[3].firstElementChild.value;\n  const salary = +form.children[4].firstElementChild.value;\n\n  newRow.innerHTML = `\n    <tr>\n      <td>${employeeName}</td>\n      <td>${position}</td>\n      <td>${office}</td>\n      <td>${age}</td>\n      <td>$${salary.toLocaleString('en-US')}</td>\n    </tr>\n  `;\n\n  if (employeeName.length < minNameLength || !isNaN(+employeeName)) {\n    e.preventDefault();\n    errorNotification('Name');\n\n    return;\n  }\n\n  if (age < minAge || age > maxAge) {\n    e.preventDefault();\n    errorNotification('Age');\n\n    return;\n  }\n\n  if (salary <= 0) {\n    e.preventDefault();\n    errorNotification('Salary');\n\n    return;\n  }\n\n  if (!isNaN(+position)) {\n    e.preventDefault('Position');\n    errorNotification();\n\n    return;\n  }\n\n  successNotification();\n  tableBody.append(newRow);\n  form.reset();\n\n  addAbilityToEdit();\n  updateEmployeesList();\n  selectEmployee();\n});\n\nlet salaryClicked = false;\nlet ageClicked = false;\nlet officeClicked = false;\nlet positionClicked = false;\nlet nameClicked = false;\n\ntableHead.addEventListener('click', e => {\n  switch (e.target.innerText) {\n    case 'Salary':\n      switch (salaryClicked) {\n        case false:\n          employees.sort((employee1, employee2) => {\n            return convertToNumber(employee1.children[4].innerText)\n              > convertToNumber(employee2.children[4]\n                .innerText) ? 1 : -1;\n          });\n\n          salaryClicked = true;\n          break;\n\n        case true:\n          employees.sort((employee1, employee2) => {\n            return convertToNumber(employee1.children[4].innerText)\n              < convertToNumber(employee2.children[4]\n                .innerText) ? 1 : -1;\n          });\n\n          salaryClicked = false;\n          break;\n      }\n\n      break;\n\n    case 'Age':\n      switch (ageClicked) {\n        case false:\n          employees.sort((employee1, employee2) => {\n            return +employee1.children[3].innerText\n              > +employee2.children[3].innerText ? 1 : -1;\n          });\n\n          ageClicked = true;\n          break;\n\n        case true:\n          employees.sort((employee1, employee2) => {\n            return +employee1.children[3].innerText\n              < +employee2.children[3].innerText ? 1 : -1;\n          });\n\n          ageClicked = false;\n          break;\n      }\n\n      break;\n\n    case 'Office':\n      switch (officeClicked) {\n        case false:\n          employees.sort((employee1, employee2) => {\n            return employee1.children[2].innerText\n              .localeCompare(employee2.children[2].innerText);\n          });\n\n          officeClicked = true;\n          break;\n\n        case true:\n          employees.sort((employee1, employee2) => {\n            return -employee1.children[2].innerText\n              .localeCompare(employee2.children[2].innerText);\n          });\n\n          officeClicked = false;\n          break;\n      }\n      break;\n\n    case 'Position':\n      switch (positionClicked) {\n        case false:\n          employees.sort((employee1, employee2) => {\n            return employee1.children[1].innerText\n              .localeCompare(employee2.children[1].innerText);\n          });\n\n          positionClicked = true;\n          break;\n\n        case true:\n          employees.sort((employee1, employee2) => {\n            return employee2.children[1].innerText\n              .localeCompare(employee1.children[1].innerText);\n          });\n\n          positionClicked = false;\n          break;\n      }\n      break;\n\n    case 'Name':\n      switch (nameClicked) {\n        case false:\n          employees.sort((employee1, employee2) => {\n            return employee1.children[0].innerText\n              .localeCompare(employee2.children[0].innerText);\n          });\n\n          nameClicked = true;\n          break;\n\n        case true:\n          employees.sort((employee1, employee2) => {\n            return -employee1.children[0].innerText\n              .localeCompare(employee2.children[0].innerText);\n          });\n\n          nameClicked = false;\n          break;\n      }\n      break;\n  }\n\n  tableBody.innerHTML = `\n      ${employees.map(element => `\n        <tr>\n          <td>${element.children[0].innerText}</td>\n          <td>${element.children[1].innerText}</td>\n          <td>${element.children[2].innerText}</td>\n          <td>${element.children[3].innerText}</td>\n          <td>${element.children[4].innerText}</td>\n        </tr>\n      `).join('')}\n    `;\n\n  updateEmployeesList();\n  selectEmployee();\n  addAbilityToEdit();\n});\n\nselectEmployee();\naddAbilityToEdit();\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","convertToNumber","text","replace","replaceAll","title","description","tableHead","document","querySelector","table","tableBody","allRows","querySelectorAll","employees","splice","pop","notification","createElement","errorNotification","data","arguments","concat","innerHTML","classList","add","remove","after","setTimeout","cellValidation","currentCellInput","currentElement","currentText","newText","value","innerText","isNaN","includes","minAge","maxAge","updateEmployeesList","selectEmployee","forEach","element","addEventListener","activeElement","dataset","qa","addAbilityToEdit","initialText","cellInput","append","focus","e","key","form","saveButton","preventDefault","newRow","employeeName","children","firstElementChild","position","office","age","salary","toLocaleString","reset","salaryClicked","ageClicked","officeClicked","positionClicked","nameClicked","target","sort","employee1","employee2","localeCompare","map","join"],"version":3,"file":"index.1cb16316.js.map"}